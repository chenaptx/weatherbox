// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: _SenxXF7JW2b
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ActionButton from "../../ActionButton"; // plasmic-import: YlvRm9eUPZag/component
import BlockButton from "../../BlockButton"; // plasmic-import: 4Av6mv5Lu0DX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicFollowableProfile.module.css"; // plasmic-import: _SenxXF7JW2b/css

import image11PtgN1IMRoBf from "./images/image11.png"; // plasmic-import: PtgN1I-mROBf/picture

export type PlasmicFollowableProfile__VariantMembers = {
  following: "following";
};

export type PlasmicFollowableProfile__VariantsArgs = {
  following?: SingleBooleanChoiceArg<"following">;
};

type VariantPropType = keyof PlasmicFollowableProfile__VariantsArgs;
export const PlasmicFollowableProfile__VariantProps =
  new Array<VariantPropType>("following");

export type PlasmicFollowableProfile__ArgsType = {};
type ArgPropType = keyof PlasmicFollowableProfile__ArgsType;
export const PlasmicFollowableProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicFollowableProfile__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  actionButton?: p.Flex<typeof ActionButton>;
  blockButton?: p.Flex<typeof BlockButton>;
};

export interface DefaultFollowableProfileProps {
  following?: SingleBooleanChoiceArg<"following">;
  className?: string;
}

function PlasmicFollowableProfile__RenderFunc(props: {
  variants: PlasmicFollowableProfile__VariantsArgs;
  args: PlasmicFollowableProfile__ArgsType;
  overrides: PlasmicFollowableProfile__OverridesType;
  dataFetches?: PlasmicFollowableProfile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__following]: hasVariant(variants, "following", "following")
        }
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.img__following]: hasVariant(variants, "following", "following")
        })}
        displayHeight={"50px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"none" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"50px" as const}
        src={{
          src: image11PtgN1IMRoBf,
          fullWidth: 150,
          fullHeight: 184,
          aspectRatio: undefined
        }}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox___4VWyu,
          {
            [sty.freeBox__following___4VWyunUeXb]: hasVariant(
              variants,
              "following",
              "following"
            )
          }
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___8V7Pi,
            {
              [sty.freeBox__following___8V7PInUeXb]: hasVariant(
                variants,
                "following",
                "following"
              )
            }
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___8Itbu,
              {
                [sty.text__following___8ItbUnUeXb]: hasVariant(
                  variants,
                  "following",
                  "following"
                )
              }
            )}
          >
            {"Totoro"}
          </div>
        </p.Stack>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__eAbT3,
            {
              [sty.text__following__eAbT3NUeXb]: hasVariant(
                variants,
                "following",
                "following"
              )
            }
          )}
        >
          {"@friendlyneighbor"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__wZbUr
        )}
      >
        <ActionButton
          data-plasmic-name={"actionButton"}
          data-plasmic-override={overrides.actionButton}
          className={classNames("__wab_instance", sty.actionButton, {
            [sty.actionButton__following]: hasVariant(
              variants,
              "following",
              "following"
            )
          })}
        >
          {"Follow"}
        </ActionButton>

        <BlockButton
          data-plasmic-name={"blockButton"}
          data-plasmic-override={overrides.blockButton}
          className={classNames("__wab_instance", sty.blockButton, {
            [sty.blockButton__following]: hasVariant(
              variants,
              "following",
              "following"
            )
          })}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "actionButton", "blockButton"],
  img: ["img"],
  actionButton: ["actionButton"],
  blockButton: ["blockButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  actionButton: typeof ActionButton;
  blockButton: typeof BlockButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFollowableProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFollowableProfile__VariantsArgs;
    args?: PlasmicFollowableProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFollowableProfile__Fetches;
  } & Omit<PlasmicFollowableProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFollowableProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFollowableProfile__ArgProps,
      internalVariantPropNames: PlasmicFollowableProfile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFollowableProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFollowableProfile";
  } else {
    func.displayName = `PlasmicFollowableProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicFollowableProfile = Object.assign(
  // Top-level PlasmicFollowableProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    actionButton: makeNodeComponent("actionButton"),
    blockButton: makeNodeComponent("blockButton"),

    // Metadata about props expected for PlasmicFollowableProfile
    internalVariantProps: PlasmicFollowableProfile__VariantProps,
    internalArgProps: PlasmicFollowableProfile__ArgProps
  }
);

export default PlasmicFollowableProfile;
/* prettier-ignore-end */
