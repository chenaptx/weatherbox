// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: ZUDDTGJ2pJQF
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicCompletedDashboard.module.css"; // plasmic-import: ZUDDTGJ2pJQF/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: xSzYxSCGZuoJ/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 8i8-Q_bieOi3/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: HMfG8wkmZF6H/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: 4Ib216HcC2ev/icon

export type PlasmicCompletedDashboard__VariantMembers = {};

export type PlasmicCompletedDashboard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompletedDashboard__VariantsArgs;
export const PlasmicCompletedDashboard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCompletedDashboard__ArgsType = {};
type ArgPropType = keyof PlasmicCompletedDashboard__ArgsType;
export const PlasmicCompletedDashboard__ArgProps = new Array<ArgPropType>();

export type PlasmicCompletedDashboard__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultCompletedDashboardProps {
  className?: string;
}

function PlasmicCompletedDashboard__RenderFunc(props: {
  variants: PlasmicCompletedDashboard__VariantsArgs;
  args: PlasmicCompletedDashboard__ArgsType;
  overrides: PlasmicCompletedDashboard__OverridesType;
  dataFetches?: PlasmicCompletedDashboard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__kr9V4
        )}
      >
        <Icon16Icon
          className={classNames(defaultcss.all, projectcss.all, sty.svg__oxq1S)}
          role={"img"}
        />

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__nKXk
          )}
        >
          {"Dashboard"}
        </div>

        <Icon17Icon
          className={classNames(defaultcss.all, projectcss.all, sty.svg__aVsx)}
          role={"img"}
        />

        <Icon15Icon
          className={classNames(defaultcss.all, projectcss.all, sty.svg__jL4K)}
          role={"img"}
        />
      </p.Stack>

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__wTu3
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__kt1D0
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__h501S
            )}
          >
            {"Dashboard"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__bsnFo
            )}
          >
            {"Reports"}
          </div>
        </p.Stack>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox___9AEjm
          )}
        >
          <Icon18Icon
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.svg__ntbeQ
            )}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompletedDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompletedDashboard__VariantsArgs;
    args?: PlasmicCompletedDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCompletedDashboard__Fetches;
  } & Omit<PlasmicCompletedDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCompletedDashboard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedDashboard__ArgProps,
      internalVariantPropNames: PlasmicCompletedDashboard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCompletedDashboard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedDashboard";
  } else {
    func.displayName = `PlasmicCompletedDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedDashboard = Object.assign(
  // Top-level PlasmicCompletedDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCompletedDashboard
    internalVariantProps: PlasmicCompletedDashboard__VariantProps,
    internalArgProps: PlasmicCompletedDashboard__ArgProps
  }
);

export default PlasmicCompletedDashboard;
/* prettier-ignore-end */
