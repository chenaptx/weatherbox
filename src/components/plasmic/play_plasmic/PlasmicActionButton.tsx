// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: YlvRm9eUPZag
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicActionButton.module.css"; // plasmic-import: YlvRm9eUPZag/css

export type PlasmicActionButton__VariantMembers = {
  variants: "primary";
};

export type PlasmicActionButton__VariantsArgs = {
  variants?: SingleChoiceArg<"primary">;
};

type VariantPropType = keyof PlasmicActionButton__VariantsArgs;
export const PlasmicActionButton__VariantProps = new Array<VariantPropType>(
  "variants"
);

export type PlasmicActionButton__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActionButton__ArgsType;
export const PlasmicActionButton__ArgProps = new Array<ArgPropType>("children");

export type PlasmicActionButton__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultActionButtonProps {
  children?: React.ReactNode;
  variants?: SingleChoiceArg<"primary">;
  className?: string;
}

function PlasmicActionButton__RenderFunc(props: {
  variants: PlasmicActionButton__VariantsArgs;
  args: PlasmicActionButton__ArgsType;
  overrides: PlasmicActionButton__OverridesType;
  dataFetches?: PlasmicActionButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__variants_primary]: hasVariant(
            variants,
            "variants",
            "primary"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Follow",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildren__variants_primary]: hasVariant(
            variants,
            "variants",
            "primary"
          )
        })
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionButton__VariantsArgs;
    args?: PlasmicActionButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicActionButton__Fetches;
  } & Omit<PlasmicActionButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActionButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionButton__ArgProps,
      internalVariantPropNames: PlasmicActionButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicActionButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionButton";
  } else {
    func.displayName = `PlasmicActionButton.${nodeName}`;
  }
  return func;
}

export const PlasmicActionButton = Object.assign(
  // Top-level PlasmicActionButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicActionButton
    internalVariantProps: PlasmicActionButton__VariantProps,
    internalArgProps: PlasmicActionButton__ArgProps
  }
);

export default PlasmicActionButton;
/* prettier-ignore-end */
