// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: KsrCBwAy5kl
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Footer from "../../Footer"; // plasmic-import: MpJ5OsIf2JP/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicLevel.module.css"; // plasmic-import: KsrCBwAy5kl/css

export type PlasmicLevel__VariantMembers = {
  variations: "noFooter" | "footerOnly";
  showMaxLevels: "showMaxLevels";
  rightSide: "rightSide";
  basics: "basics";
};

export type PlasmicLevel__VariantsArgs = {
  variations?: SingleChoiceArg<"noFooter" | "footerOnly">;
  showMaxLevels?: SingleBooleanChoiceArg<"showMaxLevels">;
  rightSide?: SingleBooleanChoiceArg<"rightSide">;
  basics?: SingleBooleanChoiceArg<"basics">;
};

type VariantPropType = keyof PlasmicLevel__VariantsArgs;
export const PlasmicLevel__VariantProps = new Array<VariantPropType>(
  "variations",
  "showMaxLevels",
  "rightSide",
  "basics"
);

export type PlasmicLevel__ArgsType = {
  children?: React.ReactNode;
  number?: React.ReactNode;
  title?: React.ReactNode;
  right?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLevel__ArgsType;
export const PlasmicLevel__ArgProps = new Array<ArgPropType>(
  "children",
  "number",
  "title",
  "right"
);

export type PlasmicLevel__OverridesType = {
  root?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLevelProps {
  children?: React.ReactNode;
  number?: React.ReactNode;
  title?: React.ReactNode;
  right?: React.ReactNode;
  variations?: SingleChoiceArg<"noFooter" | "footerOnly">;
  showMaxLevels?: SingleBooleanChoiceArg<"showMaxLevels">;
  rightSide?: SingleBooleanChoiceArg<"rightSide">;
  basics?: SingleBooleanChoiceArg<"basics">;
  className?: string;
}

function PlasmicLevel__RenderFunc(props: {
  variants: PlasmicLevel__VariantsArgs;
  args: PlasmicLevel__ArgsType;
  overrides: PlasmicLevel__OverridesType;
  dataFetches?: PlasmicLevel__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__variations_footerOnly]: hasVariant(
            variants,
            "variations",
            "footerOnly"
          ),
          [sty.root__variations_noFooter]: hasVariant(
            variants,
            "variations",
            "noFooter"
          )
        }
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__jaZZ,
          {
            [sty.freeBox__variations_noFooter__jaZZ62LgX]: hasVariant(
              variants,
              "variations",
              "noFooter"
            )
          }
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__aYff9,
            {
              [sty.freeBox__basics__aYff9Zaurs]: hasVariant(
                variants,
                "basics",
                "basics"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox___4ErYb,
              {
                [sty.freeBox__rightSide___4ErYb9PTwC]: hasVariant(
                  variants,
                  "rightSide",
                  "rightSide"
                ),
                [sty.freeBox__showMaxLevels___4ErYbxmSuR]: hasVariant(
                  variants,
                  "showMaxLevels",
                  "showMaxLevels"
                ),
                [sty.freeBox__variations_noFooter___4ErYb62LgX]: hasVariant(
                  variants,
                  "variations",
                  "noFooter"
                )
              }
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__jOiaK,
                {
                  [sty.freeBox__rightSide__jOiaK9PTwC]: hasVariant(
                    variants,
                    "rightSide",
                    "rightSide"
                  ),
                  [sty.freeBox__showMaxLevels__jOiaKxmSuR]: hasVariant(
                    variants,
                    "showMaxLevels",
                    "showMaxLevels"
                  )
                }
              )}
            >
              {(hasVariant(variants, "basics", "basics") ? false : true) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text__si0Yw,
                    {
                      [sty.text__basics__si0YwZaurs]: hasVariant(
                        variants,
                        "basics",
                        "basics"
                      ),
                      [sty.text__showMaxLevels__si0YwxmSuR]: hasVariant(
                        variants,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {"Advanced "}
                </div>
              ) : null}
              {(hasVariant(variants, "variations", "footerOnly") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          defaultcss.__wab_text,
                          sty.text__a1Bkr
                        )}
                      >
                        {"Level 1"}
                      </div>
                    ),

                    value: args.number,
                    className: classNames(sty.slotTargetNumber, {
                      [sty.slotTargetNumber__variations_footerOnly]: hasVariant(
                        variants,
                        "variations",
                        "footerOnly"
                      )
                    })
                  })
                : null}
              {(
                hasVariant(variants, "showMaxLevels", "showMaxLevels")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    projectcss.all,
                    defaultcss.__wab_text,
                    sty.text___81H5Y,
                    {
                      [sty.text__showMaxLevels___81H5YxmSuR]: hasVariant(
                        variants,
                        "showMaxLevels",
                        "showMaxLevels"
                      )
                    }
                  )}
                >
                  {" of 7"}
                </div>
              ) : null}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__pbbtg
              )}
            >
              {(hasVariant(variants, "variations", "footerOnly") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          defaultcss.all,
                          projectcss.all,
                          defaultcss.__wab_text,
                          sty.text__dM7Mb
                        )}
                      >
                        {"Draw a box."}
                      </div>
                    ),

                    value: args.title,
                    className: classNames(sty.slotTargetTitle, {
                      [sty.slotTargetTitle__variations_footerOnly]: hasVariant(
                        variants,
                        "variations",
                        "footerOnly"
                      )
                    })
                  })
                : null}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text___3DW88
                    )}
                  >
                    {
                      "Press r to enter rectangle drawing mode. Drag to try drawing the given shape."
                    }
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      sty.freeBox__pav66
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        projectcss.all,
                        sty.freeBox__uffId
                      )}
                    />
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      projectcss.all,
                      defaultcss.__wab_text,
                      sty.text__euBq1
                    )}
                  >
                    {"Tip: hold shift while dragging to draw a perfect square."}
                  </div>
                </React.Fragment>
              ),
              value: args.children
            })}
          </p.Stack>

          {(hasVariant(variants, "rightSide", "rightSide") ? true : false) ? (
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__vuarJ,
                {
                  [sty.freeBox__rightSide__vuarJ9PTwC]: hasVariant(
                    variants,
                    "rightSide",
                    "rightSide"
                  )
                }
              )}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.right
              })}
            </div>
          ) : null}
        </p.Stack>

        {(hasVariant(variants, "variations", "noFooter") ? false : true) ? (
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footer__variations_noFooter]: hasVariant(
                variants,
                "variations",
                "noFooter"
              )
            })}
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "footer"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLevel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLevel__VariantsArgs;
    args?: PlasmicLevel__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLevel__Fetches;
  } & Omit<PlasmicLevel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLevel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLevel__ArgProps,
      internalVariantPropNames: PlasmicLevel__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLevel__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLevel";
  } else {
    func.displayName = `PlasmicLevel.${nodeName}`;
  }
  return func;
}

export const PlasmicLevel = Object.assign(
  // Top-level PlasmicLevel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLevel
    internalVariantProps: PlasmicLevel__VariantProps,
    internalArgProps: PlasmicLevel__ArgProps
  }
);

export default PlasmicLevel;
/* prettier-ignore-end */
