// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: 4cCoeqo7Fyhr
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicCompletedTestimonial.module.css"; // plasmic-import: 4cCoeqo7Fyhr/css

import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: zuLiKym3ObVu/icon
import image45EIfTYhYfQhu from "./images/image45.png"; // plasmic-import: EIfT_YhYfQhu/picture

export type PlasmicCompletedTestimonial__VariantMembers = {};

export type PlasmicCompletedTestimonial__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompletedTestimonial__VariantsArgs;
export const PlasmicCompletedTestimonial__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCompletedTestimonial__ArgsType = {};
type ArgPropType = keyof PlasmicCompletedTestimonial__ArgsType;
export const PlasmicCompletedTestimonial__ArgProps = new Array<ArgPropType>();

export type PlasmicCompletedTestimonial__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  svg?: p.Flex<"svg">;
};

export interface DefaultCompletedTestimonialProps {
  className?: string;
}

function PlasmicCompletedTestimonial__RenderFunc(props: {
  variants: PlasmicCompletedTestimonial__VariantsArgs;
  args: PlasmicCompletedTestimonial__ArgsType;
  overrides: PlasmicCompletedTestimonial__OverridesType;
  dataFetches?: PlasmicCompletedTestimonial__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"none" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"100px" as const}
        src={{
          src: image45EIfTYhYfQhu,
          fullWidth: 205,
          fullHeight: 208,
          aspectRatio: undefined
        }}
      />

      <Icon28Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(defaultcss.all, projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__foIU
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__gfN23
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___8OMf7
            )}
          >
            {"Truly revolutionary. An incredible leap forward."}
          </div>
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__oMFsF
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            sty.freeBox__zw4Qj
          )}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__y7I8K
            )}
          >
            {"Jane Doe"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__uLj7D
            )}
          >
            {"VP Marketing\nPied Piper"}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompletedTestimonial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompletedTestimonial__VariantsArgs;
    args?: PlasmicCompletedTestimonial__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCompletedTestimonial__Fetches;
  } & Omit<PlasmicCompletedTestimonial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCompletedTestimonial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCompletedTestimonial__ArgProps,
      internalVariantPropNames: PlasmicCompletedTestimonial__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCompletedTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedTestimonial";
  } else {
    func.displayName = `PlasmicCompletedTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedTestimonial = Object.assign(
  // Top-level PlasmicCompletedTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicCompletedTestimonial
    internalVariantProps: PlasmicCompletedTestimonial__VariantProps,
    internalArgProps: PlasmicCompletedTestimonial__ArgProps
  }
);

export default PlasmicCompletedTestimonial;
/* prettier-ignore-end */
