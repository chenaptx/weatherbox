// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: LIWk-liDEZ
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicPanel.module.css"; // plasmic-import: LIWk-liDEZ/css

import Ellipse7Icon from "./icons/PlasmicIcon__Ellipse7"; // plasmic-import: SRs8usgSF8/icon

export type PlasmicPanel__VariantMembers = {};

export type PlasmicPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanel__VariantsArgs;
export const PlasmicPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicPanel__ArgsType = {};
type ArgPropType = keyof PlasmicPanel__ArgsType;
export const PlasmicPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicPanel__OverridesType = {
  root?: p.Flex<"div">;
  frame50?: p.Flex<"div">;
  group48?: p.Flex<"div">;
  _41774964122951819?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  _12Miles5476FtBellevueWa?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  group15?: p.Flex<"div">;
  rectangle398?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  group16?: p.Flex<"div">;
  rectangle399?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  group17?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  group19?: p.Flex<"div">;
  rectangle400?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  group18?: p.Flex<"div">;
  rectangle401?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  group20?: p.Flex<"div">;
  rectangle402?: p.Flex<"div">;
  frame9?: p.Flex<"div">;
  frame10?: p.Flex<"div">;
  group21?: p.Flex<"div">;
  rectangle403?: p.Flex<"div">;
  frame11?: p.Flex<"div">;
  frame12?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
};

export interface DefaultPanelProps {
  className?: string;
}

function PlasmicPanel__RenderFunc(props: {
  variants: PlasmicPanel__VariantsArgs;
  args: PlasmicPanel__ArgsType;
  overrides: PlasmicPanel__OverridesType;
  dataFetches?: PlasmicPanel__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame50"}
        data-plasmic-override={overrides.frame50}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.all, sty.frame50)}
      >
        <div
          data-plasmic-name={"group48"}
          data-plasmic-override={overrides.group48}
          className={classNames(defaultcss.all, projectcss.all, sty.group48)}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__g6Ow9
            )}
          >
            {"Weatherbox02"}
          </div>

          <div
            data-plasmic-name={"_41774964122951819"}
            data-plasmic-override={overrides._41774964122951819}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty._41774964122951819
            )}
          >
            {" 41.774964, -122.951819\r\n"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__el4Hw
            )}
          >
            {"Last Updated: 15 mins ago"}
          </div>

          <Ellipse7Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, projectcss.all, sty.svg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"_12Miles5476FtBellevueWa"}
            data-plasmic-override={overrides._12Miles5476FtBellevueWa}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty._12Miles5476FtBellevueWa
            )}
          >
            {" 12 miles, 5476 ft, Bellevue, WA"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame5"}
          data-plasmic-override={overrides.frame5}
          hasGap={true}
          className={classNames(defaultcss.all, projectcss.all, sty.frame5)}
        >
          <div
            data-plasmic-name={"group15"}
            data-plasmic-override={overrides.group15}
            className={classNames(defaultcss.all, projectcss.all, sty.group15)}
          >
            <div
              data-plasmic-name={"rectangle398"}
              data-plasmic-override={overrides.rectangle398}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle398
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame2)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__g84A6
                )}
              >
                {"42 F"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__hrVi1
                )}
              >
                {"Air Temperature"}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"group16"}
            data-plasmic-override={overrides.group16}
            className={classNames(defaultcss.all, projectcss.all, sty.group16)}
          >
            <div
              data-plasmic-name={"rectangle399"}
              data-plasmic-override={overrides.rectangle399}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle399
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame3)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text___8RaIt
                )}
              >
                {"12 mph"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__y9XCb
                )}
              >
                {"Wind speed"}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"group17"}
            data-plasmic-override={overrides.group17}
            className={classNames(defaultcss.all, projectcss.all, sty.group17)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame4)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__tgRdF
                )}
              >
                {"NorthWest"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__dHcOd
                )}
              >
                {"Wind direction"}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"group19"}
            data-plasmic-override={overrides.group19}
            className={classNames(defaultcss.all, projectcss.all, sty.group19)}
          >
            <div
              data-plasmic-name={"rectangle400"}
              data-plasmic-override={overrides.rectangle400}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle400
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame6)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__iAih9
                )}
              >
                {"25 mph"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__dAcxY
                )}
              >
                {"Pick Gust in 10 mins"}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"group18"}
            data-plasmic-override={overrides.group18}
            className={classNames(defaultcss.all, projectcss.all, sty.group18)}
          >
            <div
              data-plasmic-name={"rectangle401"}
              data-plasmic-override={overrides.rectangle401}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle401
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame7)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__mNlU
                )}
              >
                {"56%"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text___0OTtJ
                )}
              >
                {"Relative Humidity"}
              </div>
            </p.Stack>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame8"}
          data-plasmic-override={overrides.frame8}
          hasGap={true}
          className={classNames(defaultcss.all, projectcss.all, sty.frame8)}
        >
          <div
            data-plasmic-name={"group20"}
            data-plasmic-override={overrides.group20}
            className={classNames(defaultcss.all, projectcss.all, sty.group20)}
          >
            <div
              data-plasmic-name={"rectangle402"}
              data-plasmic-override={overrides.rectangle402}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle402
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              hasGap={true}
              className={classNames(defaultcss.all, projectcss.all, sty.frame9)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__uKfrP
                )}
              >
                {"6d 5h 36 min"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__sjWne
                )}
              >
                {"Working time length"}
              </div>
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame10"}
            data-plasmic-override={overrides.frame10}
            hasGap={true}
            className={classNames(defaultcss.all, projectcss.all, sty.frame10)}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__rOs7D
              )}
            >
              {"52%"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__vGmWw
              )}
            >
              {"Battery level remained"}
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"group21"}
            data-plasmic-override={overrides.group21}
            className={classNames(defaultcss.all, projectcss.all, sty.group21)}
          >
            <div
              data-plasmic-name={"rectangle403"}
              data-plasmic-override={overrides.rectangle403}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.rectangle403
              )}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.frame11
              )}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__mAfAk
                )}
              >
                {"3 days"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__kBlmV
                )}
              >
                {"Estimated battery life"}
              </div>
            </p.Stack>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame12"}
          data-plasmic-override={overrides.frame12}
          hasGap={true}
          className={classNames(defaultcss.all, projectcss.all, sty.frame12)}
        >
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text__xysJv
            )}
          >
            {"Sensors Working Voltages"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame13"}
            data-plasmic-override={overrides.frame13}
            hasGap={true}
            className={classNames(defaultcss.all, projectcss.all, sty.frame13)}
          >
            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__pqlsF
              )}
            >
              {"WInd sensor: 5.3 V"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__nniah
              )}
            >
              {"Humidity sensor : 5.3 V"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__syYux
              )}
            >
              {"Temperature sensor: 5.3 V"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame50",
    "group48",
    "_41774964122951819",
    "svg",
    "_12Miles5476FtBellevueWa",
    "frame5",
    "group15",
    "rectangle398",
    "frame2",
    "group16",
    "rectangle399",
    "frame3",
    "group17",
    "frame4",
    "group19",
    "rectangle400",
    "frame6",
    "group18",
    "rectangle401",
    "frame7",
    "frame8",
    "group20",
    "rectangle402",
    "frame9",
    "frame10",
    "group21",
    "rectangle403",
    "frame11",
    "frame12",
    "frame13"
  ],
  frame50: [
    "frame50",
    "group48",
    "_41774964122951819",
    "svg",
    "_12Miles5476FtBellevueWa",
    "frame5",
    "group15",
    "rectangle398",
    "frame2",
    "group16",
    "rectangle399",
    "frame3",
    "group17",
    "frame4",
    "group19",
    "rectangle400",
    "frame6",
    "group18",
    "rectangle401",
    "frame7",
    "frame8",
    "group20",
    "rectangle402",
    "frame9",
    "frame10",
    "group21",
    "rectangle403",
    "frame11",
    "frame12",
    "frame13"
  ],
  group48: ["group48", "_41774964122951819", "svg", "_12Miles5476FtBellevueWa"],
  _41774964122951819: ["_41774964122951819"],
  svg: ["svg"],
  _12Miles5476FtBellevueWa: ["_12Miles5476FtBellevueWa"],
  frame5: [
    "frame5",
    "group15",
    "rectangle398",
    "frame2",
    "group16",
    "rectangle399",
    "frame3",
    "group17",
    "frame4",
    "group19",
    "rectangle400",
    "frame6",
    "group18",
    "rectangle401",
    "frame7"
  ],
  group15: ["group15", "rectangle398", "frame2"],
  rectangle398: ["rectangle398"],
  frame2: ["frame2"],
  group16: ["group16", "rectangle399", "frame3"],
  rectangle399: ["rectangle399"],
  frame3: ["frame3"],
  group17: ["group17", "frame4"],
  frame4: ["frame4"],
  group19: ["group19", "rectangle400", "frame6"],
  rectangle400: ["rectangle400"],
  frame6: ["frame6"],
  group18: ["group18", "rectangle401", "frame7"],
  rectangle401: ["rectangle401"],
  frame7: ["frame7"],
  frame8: [
    "frame8",
    "group20",
    "rectangle402",
    "frame9",
    "frame10",
    "group21",
    "rectangle403",
    "frame11"
  ],
  group20: ["group20", "rectangle402", "frame9"],
  rectangle402: ["rectangle402"],
  frame9: ["frame9"],
  frame10: ["frame10"],
  group21: ["group21", "rectangle403", "frame11"],
  rectangle403: ["rectangle403"],
  frame11: ["frame11"],
  frame12: ["frame12", "frame13"],
  frame13: ["frame13"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame50: "div";
  group48: "div";
  _41774964122951819: "div";
  svg: "svg";
  _12Miles5476FtBellevueWa: "div";
  frame5: "div";
  group15: "div";
  rectangle398: "div";
  frame2: "div";
  group16: "div";
  rectangle399: "div";
  frame3: "div";
  group17: "div";
  frame4: "div";
  group19: "div";
  rectangle400: "div";
  frame6: "div";
  group18: "div";
  rectangle401: "div";
  frame7: "div";
  frame8: "div";
  group20: "div";
  rectangle402: "div";
  frame9: "div";
  frame10: "div";
  group21: "div";
  rectangle403: "div";
  frame11: "div";
  frame12: "div";
  frame13: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanel__VariantsArgs;
    args?: PlasmicPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanel__Fetches;
  } & Omit<PlasmicPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanel__ArgProps,
      internalVariantPropNames: PlasmicPanel__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanel__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanel";
  } else {
    func.displayName = `PlasmicPanel.${nodeName}`;
  }
  return func;
}

export const PlasmicPanel = Object.assign(
  // Top-level PlasmicPanel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame50: makeNodeComponent("frame50"),
    group48: makeNodeComponent("group48"),
    _41774964122951819: makeNodeComponent("_41774964122951819"),
    svg: makeNodeComponent("svg"),
    _12Miles5476FtBellevueWa: makeNodeComponent("_12Miles5476FtBellevueWa"),
    frame5: makeNodeComponent("frame5"),
    group15: makeNodeComponent("group15"),
    rectangle398: makeNodeComponent("rectangle398"),
    frame2: makeNodeComponent("frame2"),
    group16: makeNodeComponent("group16"),
    rectangle399: makeNodeComponent("rectangle399"),
    frame3: makeNodeComponent("frame3"),
    group17: makeNodeComponent("group17"),
    frame4: makeNodeComponent("frame4"),
    group19: makeNodeComponent("group19"),
    rectangle400: makeNodeComponent("rectangle400"),
    frame6: makeNodeComponent("frame6"),
    group18: makeNodeComponent("group18"),
    rectangle401: makeNodeComponent("rectangle401"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    group20: makeNodeComponent("group20"),
    rectangle402: makeNodeComponent("rectangle402"),
    frame9: makeNodeComponent("frame9"),
    frame10: makeNodeComponent("frame10"),
    group21: makeNodeComponent("group21"),
    rectangle403: makeNodeComponent("rectangle403"),
    frame11: makeNodeComponent("frame11"),
    frame12: makeNodeComponent("frame12"),
    frame13: makeNodeComponent("frame13"),

    // Metadata about props expected for PlasmicPanel
    internalVariantProps: PlasmicPanel__VariantProps,
    internalArgProps: PlasmicPanel__ArgProps
  }
);

export default PlasmicPanel;
/* prettier-ignore-end */
