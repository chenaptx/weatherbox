// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: 6hg05LvOFvzx
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicExamplePage.module.css"; // plasmic-import: 6hg05LvOFvzx/css

import image48KB3Loh36MOtV from "./images/image48.png"; // plasmic-import: kB3loh36MOtV/picture

export type PlasmicExamplePage__VariantMembers = {};

export type PlasmicExamplePage__VariantsArgs = {};
type VariantPropType = keyof PlasmicExamplePage__VariantsArgs;
export const PlasmicExamplePage__VariantProps = new Array<VariantPropType>();

export type PlasmicExamplePage__ArgsType = {};
type ArgPropType = keyof PlasmicExamplePage__ArgsType;
export const PlasmicExamplePage__ArgProps = new Array<ArgPropType>();

export type PlasmicExamplePage__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultExamplePageProps {
  className?: string;
}

function PlasmicExamplePage__RenderFunc(props: {
  variants: PlasmicExamplePage__VariantsArgs;
  args: PlasmicExamplePage__ArgsType;
  overrides: PlasmicExamplePage__OverridesType;
  dataFetches?: PlasmicExamplePage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              projectcss.all,
              sty.freeBox__jP45R
            )}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              src={{
                src: image48KB3Loh36MOtV,
                fullWidth: 697,
                fullHeight: 1064,
                aspectRatio: undefined
              }}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                projectcss.all,
                sty.freeBox__w7Lio
              )}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__bUy0C
                )}
              >
                {"Ceramic Shield."}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  sty.freeBox__zVvg6
                )}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__hBdR
                )}
              >
                {"Even better spill and splash resistance."}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  projectcss.all,
                  defaultcss.__wab_text,
                  sty.text__oZs61
                )}
              >
                {"Find out how"}
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExamplePage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExamplePage__VariantsArgs;
    args?: PlasmicExamplePage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicExamplePage__Fetches;
  } & Omit<PlasmicExamplePage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExamplePage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicExamplePage__ArgProps,
      internalVariantPropNames: PlasmicExamplePage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicExamplePage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExamplePage";
  } else {
    func.displayName = `PlasmicExamplePage.${nodeName}`;
  }
  return func;
}

export const PlasmicExamplePage = Object.assign(
  // Top-level PlasmicExamplePage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicExamplePage
    internalVariantProps: PlasmicExamplePage__VariantProps,
    internalArgProps: PlasmicExamplePage__ArgProps
  }
);

export default PlasmicExamplePage;
/* prettier-ignore-end */
