// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: GV0DmJWMQouB
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Level from "../../Level"; // plasmic-import: KsrCBwAy5kl/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicBackup.module.css"; // plasmic-import: GV0DmJWMQouB/css

import image22GwjoPpn8Mber from "./images/image22.svg"; // plasmic-import: GwjoPpn8Mber/picture

export type PlasmicBackup__VariantMembers = {};

export type PlasmicBackup__VariantsArgs = {};
type VariantPropType = keyof PlasmicBackup__VariantsArgs;
export const PlasmicBackup__VariantProps = new Array<VariantPropType>();

export type PlasmicBackup__ArgsType = {};
type ArgPropType = keyof PlasmicBackup__ArgsType;
export const PlasmicBackup__ArgProps = new Array<ArgPropType>();

export type PlasmicBackup__OverridesType = {
  root?: p.Flex<"div">;
  level?: p.Flex<typeof Level>;
  freeBox?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultBackupProps {
  className?: string;
}

function PlasmicBackup__RenderFunc(props: {
  variants: PlasmicBackup__VariantsArgs;
  args: PlasmicBackup__ArgsType;
  overrides: PlasmicBackup__OverridesType;
  dataFetches?: PlasmicBackup__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root
      )}
    >
      <Level
        data-plasmic-name={"level"}
        data-plasmic-override={overrides.level}
        className={classNames("__wab_instance", sty.level)}
        number={
          <div
            className={classNames(
              defaultcss.all,
              projectcss.all,
              defaultcss.__wab_text,
              sty.text___0MuLq
            )}
          >
            {"Level 40 (epilogue)"}
          </div>
        }
        title={
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(defaultcss.all, projectcss.all, sty.freeBox)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"36px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"36px" as const}
              src={{
                src: image22GwjoPpn8Mber,
                fullWidth: 36,
                fullHeight: 36,
                aspectRatio: 1
              }}
            />

            <div
              className={classNames(
                defaultcss.all,
                projectcss.all,
                defaultcss.__wab_text,
                sty.text__b3Id5
              )}
            >
              {"Play in CodeSandbox."}
            </div>
          </p.Stack>
        }
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text___1Ysf5
          )}
        >
          {
            "What makes Plasmic special is that it lets you start with rough designs and refine them into the real presentational code components for production."
          }
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text___3Iogm
          )}
        >
          {
            "But before production, you can quickly see and play with the generated code using our CodeSandbox integration. This is a great way to quickly spin up prototypes as well, right in the browser, using CodeSandbox's best-of-breed tooling."
          }
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__tl01K
          )}
        >
          {
            "Pressing the CodeSandbox button in the toolbar will create a sandbox with the generated code. (It may take a minute for the current project, since it has many components!)"
          }
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text___9DboA
          )}
        >
          {
            "You can further update the sandbox at any time. Letting you iterate on your components maintainably is a core focus of Plasmic."
          }
        </div>
      </Level>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "level", "freeBox", "img"],
  level: ["level", "freeBox", "img"],
  freeBox: ["freeBox", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  level: typeof Level;
  freeBox: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBackup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBackup__VariantsArgs;
    args?: PlasmicBackup__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBackup__Fetches;
  } & Omit<PlasmicBackup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBackup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBackup__ArgProps,
      internalVariantPropNames: PlasmicBackup__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBackup__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBackup";
  } else {
    func.displayName = `PlasmicBackup.${nodeName}`;
  }
  return func;
}

export const PlasmicBackup = Object.assign(
  // Top-level PlasmicBackup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    level: makeNodeComponent("level"),
    freeBox: makeNodeComponent("freeBox"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicBackup
    internalVariantProps: PlasmicBackup__VariantProps,
    internalArgProps: PlasmicBackup__ArgProps
  }
);

export default PlasmicBackup;
/* prettier-ignore-end */
