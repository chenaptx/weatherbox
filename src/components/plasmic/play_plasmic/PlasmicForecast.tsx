// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mkraxK26DVUcftaRqUY3yk
// Component: 9q2mI5Jhj8gT
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_play_plasmic.module.css"; // plasmic-import: mkraxK26DVUcftaRqUY3yk/projectcss
import * as sty from "./PlasmicForecast.module.css"; // plasmic-import: 9q2mI5Jhj8gT/css

export type PlasmicForecast__VariantMembers = {
  variants: "row";
};

export type PlasmicForecast__VariantsArgs = {
  variants?: SingleChoiceArg<"row">;
};

type VariantPropType = keyof PlasmicForecast__VariantsArgs;
export const PlasmicForecast__VariantProps = new Array<VariantPropType>(
  "variants"
);

export type PlasmicForecast__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicForecast__ArgsType;
export const PlasmicForecast__ArgProps = new Array<ArgPropType>("children");

export type PlasmicForecast__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultForecastProps {
  children?: React.ReactNode;
  variants?: SingleChoiceArg<"row">;
  className?: string;
}

function PlasmicForecast__RenderFunc(props: {
  variants: PlasmicForecast__VariantsArgs;
  args: PlasmicForecast__ArgsType;
  overrides: PlasmicForecast__OverridesType;
  dataFetches?: PlasmicForecast__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.all,
        projectcss.root_reset,
        sty.root,
        { [sty.root__variants_row]: hasVariant(variants, "variants", "row") }
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__tn0J,
          {
            [sty.freeBox__variants_row__tn0JedEZf]: hasVariant(
              variants,
              "variants",
              "row"
            )
          }
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Wednesday",
          value: args.children
        })}
      </div>

      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.img__variants_row]: hasVariant(variants, "variants", "row")
        })}
        displayHeight={"64px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"none" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"64px" as const}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__a8TAn,
          {
            [sty.freeBox__variants_row__a8TAnedEZf]: hasVariant(
              variants,
              "variants",
              "row"
            )
          }
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__xRBx,
            {
              [sty.text__variants_row__xRBXedEZf]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"68°"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__g54R,
            {
              [sty.text__variants_row__g54REdEZf]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"36°"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          projectcss.all,
          sty.freeBox__gjJ,
          {
            [sty.freeBox__variants_row__gjJedEZf]: hasVariant(
              variants,
              "variants",
              "row"
            )
          }
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__kCwqV,
            {
              [sty.text__variants_row__kCwqVedEZf]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"Pollen"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            projectcss.all,
            defaultcss.__wab_text,
            sty.text__haoGy,
            {
              [sty.text__variants_row__haoGyedEZf]: hasVariant(
                variants,
                "variants",
                "row"
              )
            }
          )}
        >
          {"35"}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForecast__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForecast__VariantsArgs;
    args?: PlasmicForecast__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicForecast__Fetches;
  } & Omit<PlasmicForecast__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicForecast__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicForecast__ArgProps,
      internalVariantPropNames: PlasmicForecast__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicForecast__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForecast";
  } else {
    func.displayName = `PlasmicForecast.${nodeName}`;
  }
  return func;
}

export const PlasmicForecast = Object.assign(
  // Top-level PlasmicForecast renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicForecast
    internalVariantProps: PlasmicForecast__VariantProps,
    internalArgProps: PlasmicForecast__ArgProps
  }
);

export default PlasmicForecast;
/* prettier-ignore-end */
